import folium
from folium.plugins import HeatMap
import json

def create_map_from_geojson(geojson_path, crime_heatmap_data=None):
    """
    Create an interactive map from GeoJSON output generated by Go router.
    
    Args:
        geojson_path: Path to the GeoJSON file generated by Go
        crime_heatmap_data: Optional path to crime data CSV for heatmap
    """
    # Load GeoJSON data
    with open(geojson_path, 'r') as f:
        data = json.load(f)
    
    # Find start and end points to center the map
    start_point = None
    end_point = None
    for feature in data['features']:
        if feature['geometry']['type'] == 'Point':
            if feature['properties']['name'] == 'Start':
                coords = feature['geometry']['coordinates']
                start_point = [coords[1], coords[0]]
            elif feature['properties']['name'] == 'End':
                coords = feature['geometry']['coordinates']
                end_point = [coords[1], coords[0]]
    
    # Calculate center point for the map
    center_point = [
        (start_point[0] + end_point[0])/2,
        (start_point[1] + end_point[1])/2
    ]
    
    # Create base map
    m = folium.Map(location=center_point, zoom_start=13)
    
    # Add crime heatmap if data is provided
    if crime_heatmap_data is not None:
        heat_layer = HeatMap(
            data=crime_heatmap_data,
            radius=20,
            blur=25,
            max_zoom=17,
            min_opacity=0.4
        )
        heatmap_group = folium.FeatureGroup(name="Crime Heatmap", show=True)
        heat_layer.add_to(heatmap_group)
        heatmap_group.add_to(m)
    
    # Create route groups and add them to map
    descriptions = {
        0.00: 'Distance Only Route',
        0.25: 'Low Risk Route',
        0.50: 'Balanced Route',
        0.75: 'High Safety Route'
    }
    
    for feature in data['features']:
        if feature['geometry']['type'] == 'LineString':
            alpha = feature['properties']['alpha']
            coords = [[y, x] for x, y in feature['geometry']['coordinates']]
            color = feature['properties']['color']
            distance = feature['properties']['distance']
            risk = feature['properties']['risk']
            
            # Create feature group for this route
            route_group = folium.FeatureGroup(
                name=f"{descriptions[alpha]} (α={alpha:.2f})",
                show=(alpha == 0.50)  # Show balanced route by default
            )
            
            # Add route to its group
            folium.PolyLine(
                coords,
                color=color,
                weight=4,
                opacity=0.8,
                popup=f'Risk Weight (α): {alpha:.2f}<br>'
                      f'Distance: {distance:.2f} meters<br>'
                      f'Avg Risk Score: {risk:.4f}'
            ).add_to(route_group)
            
            route_group.add_to(m)
        
        elif feature['geometry']['type'] == 'Point':
            coords = feature['geometry']['coordinates']
            name = feature['properties']['name']
            color = feature['properties']['color'].lstrip('#')  # Remove '#' from hex color
            
            marker = folium.Marker(
                location=[coords[1], coords[0]],
                popup=name,
                icon=folium.Icon(
                    color='green' if name == 'Start' else 'red',
                    icon='info-sign'
                ),
                tooltip=f'{name} Location'
            )
            marker.add_to(m)
    
    # Add legend
    legend_html = """
    <div style="position: fixed; bottom: 50px; left: 50px; z-index: 1000; 
         background-color: white; padding: 10px; border: 2px solid grey;">
        <p><b>Routes by Risk Weight (α):</b></p>
        <p><span style='color: blue;'>&#9644;</span> Distance Only (α=0.00)</p>
        <p><span style='color: green;'>&#9644;</span> Low Risk (α=0.25)</p>
        <p><span style='color: yellow;'>&#9644;</span> Balanced (α=0.50)</p>
        <p><span style='color: orange;'>&#9644;</span> High Risk (α=0.75)</p>
        <p>
        <span style='color: green;'>●</span> Start Point<br>
        <span style='color: red;'>●</span> End Point
        </p>
    </div>
    """
    m.get_root().html.add_child(folium.Element(legend_html))
    
    # Add layer control
    folium.LayerControl(
        collapsed=False,
        position='topright'
    ).add_to(m)
    
    return m

if __name__ == "__main__":
    # Create and save map
    map_obj = create_map_from_geojson('routes.geojson')
    map_obj.save('route_comparison.html')